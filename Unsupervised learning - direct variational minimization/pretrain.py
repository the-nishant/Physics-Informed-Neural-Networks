# -*- coding: utf-8 -*-
"""Pretrain.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1CFpVfNVAibAzl-IqaqPPgteIT7Tvz5ap
"""

import matplotlib.pyplot as plt
import numpy as np
import sympy as sp
import idrlnet.shortcut as sc
import idrlnet.architecture.mlp as mlp
import idrlnet.net as net

d = 1
h = 0.5
x = sp.Symbol("x")
geo = sc.Line1D(0, d)

@sc.datanode(loss_fn="L1")
class Interior(sc.SampleDomain):
    def sampling(self, *args, **kwargs):
        points = geo.sample_interior(100)
        constraints = {
            "u": -h*x/d
        }
        return points, constraints

net = sc.get_net_node(inputs=("x",), outputs=("u",), name="net", arch=sc.Arch.mlp)

s = sc.Solver(
    sample_domains=(Interior(),),
    netnodes=[net],
    pdes=[],
    network_dir="pretrain_network_dir",
    max_iter=1000,
)
s.solve()

points = s.infer_step({"Interior": ["x", "u"]})
num_x = points["Interior"]["x"].detach().cpu().numpy().ravel()
num_u = points["Interior"]["u"].detach().cpu().numpy().ravel()

xx = np.linspace(0, d, 1000, endpoint=True)
yy = -h*xx/d
plt.plot(xx, yy)
plt.plot(num_x, num_u)
plt.show()

